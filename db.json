{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-minima-1.1/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minima-1.1/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minima-1.1/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minima-1.1/source/css/prism-dark.css","path":"css/prism-dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minima-1.1/source/css/skeleton.css","path":"css/skeleton.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minima-1.1/source/css/prism-line-numbers.css","path":"css/prism-line-numbers.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minima-1.1/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minima-1.1/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minima-1.1/source/js/nanobar.min.js","path":"js/nanobar.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-minima-1.1/.gitignore","hash":"824c6bad36ef799350c37bcd0fe5a1a88295d2f8","modified":1611679715862},{"_id":"themes/hexo-theme-minima-1.1/_config.yml","hash":"c4809bf454ffd8a4c933c33d5fdbfd236ba4a1ba","modified":1622243068949},{"_id":"themes/hexo-theme-minima-1.1/layout/archive.ejs","hash":"488cd341dad80be9c1492f726e64da587e3350a5","modified":1632605522593},{"_id":"themes/hexo-theme-minima-1.1/layout/index.ejs","hash":"b2d323d3593872e171cf084fed26fa42502682d7","modified":1632605526302},{"_id":"themes/hexo-theme-minima-1.1/layout/layout.ejs","hash":"7965d2f64937db64dd59241aab9775a11a2bcd9b","modified":1611779107012},{"_id":"themes/hexo-theme-minima-1.1/layout/page.ejs","hash":"13b0080d672c68efbc776b5c92d8348c22e89659","modified":1632605374667},{"_id":"themes/hexo-theme-minima-1.1/layout/post.ejs","hash":"99fbf1db195b4e34a5b680e3576a005d625b5b48","modified":1632605353515},{"_id":"themes/hexo-theme-minima-1.1/layout/tag.ejs","hash":"232091666883917b5585cc87ae1d8c59af3d24ce","modified":1632605939814},{"_id":"themes/hexo-theme-minima-1.1/layout/partial/comments.ejs","hash":"0f804f4f3914e889917e3ce6bee78430a6ad9558","modified":1611779172771},{"_id":"themes/hexo-theme-minima-1.1/layout/partial/footer.ejs","hash":"02578e8fb61b0c4862c9a5ddde20459502c89228","modified":1622243754636},{"_id":"themes/hexo-theme-minima-1.1/layout/partial/pagination.ejs","hash":"42c710bf481242dc3c2f72fdcd5ab51473da1a50","modified":1611779143695},{"_id":"themes/hexo-theme-minima-1.1/layout/partial/header.ejs","hash":"59c786280f18ee7f52598fb1a7fd429fd3b66bd6","modified":1611779152164},{"_id":"themes/hexo-theme-minima-1.1/layout/partial/sidebar.ejs","hash":"e83b61ef129ee343161f720cbb74057dc72b0f35","modified":1611779134804},{"_id":"themes/hexo-theme-minima-1.1/source/css/dark.css","hash":"80cbe96cab94ba0e56a6d28ba4690adc6ab0dc09","modified":1611769160019},{"_id":"themes/hexo-theme-minima-1.1/source/css/custom.css","hash":"d562b79047912d4748a2c801354e0c85ba9166a7","modified":1622243551743},{"_id":"themes/hexo-theme-minima-1.1/source/css/normalize.css","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1611679716263},{"_id":"themes/hexo-theme-minima-1.1/source/css/prism-dark.css","hash":"a863888f03eff55e3088942d80a8d887376be2fa","modified":1611679716279},{"_id":"themes/hexo-theme-minima-1.1/source/css/skeleton.css","hash":"dbe52bedd2154562fec1788579fdbe552c77240d","modified":1611776495583},{"_id":"themes/hexo-theme-minima-1.1/source/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1611679716310},{"_id":"themes/hexo-theme-minima-1.1/source/images/favicon.png","hash":"3595958d6ada49061864107b341c6f39b456079f","modified":1611686441184},{"_id":"themes/hexo-theme-minima-1.1/source/images/logo.png","hash":"e36010da438d83f70befc7815274166855a4a05f","modified":1611698095713},{"_id":"themes/hexo-theme-minima-1.1/source/js/nanobar.min.js","hash":"fc30e613dbce5b1b5602907c0966739480456875","modified":1611679716411},{"_id":"source/_posts/beta-0-1-and-general-update.md","hash":"0fea314f00435e2d45233aab93f64ca15c4e2133","modified":1632513627808},{"_id":"source/_posts/beta-0-2-presentation.md","hash":"619c0b1d822881ab4a4957f467803478cf95c38f","modified":1632513678137},{"_id":"source/_posts/devlog-september-2021.md","hash":"70083b885d2936baa2bb4ae10eb7a2fe1ffce7b4","modified":1632604936837},{"_id":"source/_posts/first-post.md","hash":"778a81ba663e4a0f5c71d02ae353377bfc9b6f59","modified":1611778744856},{"_id":"source/_posts/_hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1611670304170},{"_id":"themes/hexo-theme-minima-1.1/README.md","hash":"3da2edc3f09006d99f76332b3c5db979a784a327","modified":1611679715909},{"_id":"themes/hexo-theme-minima-1.1/LICENSE","hash":"fc8ceb662aadf2840e4aa80aa03aab56a901365f","modified":1611681385660},{"_id":"source/_posts/devlog-september-2021/thumbnail-devlog-september-2021.png","hash":"4215ae5c0e9945da0b3b62398828ab2526c5db66","modified":1632604686162},{"_id":"source/_posts/beta-0-2-presentation/2021-07-21-162137-beta-0-2-glow-example.png","hash":"7fd539da7b282c9c9bbba679979de6caa78918b1","modified":1626877309564},{"_id":"source/_posts/beta-0-2-presentation/2021-07-21-wav2bar-0-2-beta-before-after.png","hash":"2f3ba2def59b309f1739ceb6ddb0a00dfd90a9be","modified":1626878609350},{"_id":"source/_posts/beta-0-2-presentation/2021-07-21-w2b-0-2-beta-color-picker.png","hash":"9012cac4ee500bf7adbb7d60de432f9ecac995f5","modified":1626879073692},{"_id":"source/_posts/first-post/main_background.png","hash":"f4b6e4e9c0750d53a81f075d991df3b90542c2ba","modified":1599766626126},{"_id":"source/_posts/beta-0-2-presentation/2021-07-21-155400-wav2bar-0-2-0-beta.png","hash":"ff657788629da4c7d377ea10ea52b56f9f2890aa","modified":1626875681840},{"_id":"source/_posts/beta-0-1-and-general-update/thumbnail_wav2bar_showcase.jpg","hash":"086fae6c3cb51208e97c97b28c5422b3cf5de383","modified":1618427784279},{"_id":"public/atom.xml","hash":"4eadd02efc4952557932a3618bc755b5753b20e7","modified":1632605783877},{"_id":"public/2021/07/21/beta-0-2-presentation/index.html","hash":"76055ecef0d99d5a24e9f75eded247786733d3e4","modified":1632605783877},{"_id":"public/2021/09/25/devlog-september-2021/index.html","hash":"c95ddb970d10792c790f237c56ea61bc92222aa6","modified":1632605783877},{"_id":"public/2021/01/26/first-post/index.html","hash":"3eb66909c0a996f1d1bb7909fe92ecfef76ee0fa","modified":1632605783877},{"_id":"public/2021/05/29/beta-0-1-and-general-update/index.html","hash":"7fa8a81d3e30be5cba9a86e0a06819675bb26e93","modified":1632605783877},{"_id":"public/archives/index.html","hash":"d4812b81ad8940a7c19b5177085385281530d756","modified":1632605783877},{"_id":"public/archives/2021/index.html","hash":"c6a8bd8c8a38a2f7c8aa7595a316213cdcc80d7e","modified":1632605783877},{"_id":"public/archives/2021/01/index.html","hash":"e44bbcaf413ae18db25bf15f024d19e890d32040","modified":1632605783877},{"_id":"public/archives/2021/05/index.html","hash":"606e8a2987da29f77d973cf557f6639885e27b15","modified":1632605783877},{"_id":"public/archives/2021/07/index.html","hash":"24ba44acbcaf41dfd9bb25e533252ea8c5f357da","modified":1632605783877},{"_id":"public/categories/news/index.html","hash":"d82d824be156add95c389ec39987909258f9bc6d","modified":1632605783877},{"_id":"public/archives/2021/09/index.html","hash":"a2d8260a49a072f1dcbada66c10477290b1f84cf","modified":1632605783877},{"_id":"public/index.html","hash":"b595ccad839ddc733aa95c6132d02fcf33bf8dab","modified":1632605783877},{"_id":"public/categories/news/releases/index.html","hash":"18bcdd9ad37b16781b8ddd991384893f01a387ef","modified":1632605783877},{"_id":"public/categories/news/devlogs/index.html","hash":"b7a124f0391741874e709957257304c57ccd8fcc","modified":1632605783877},{"_id":"public/tags/news/index.html","hash":"592502bdca61e538cc2d5121119b19596198fdc1","modified":1632605953674},{"_id":"public/tags/beta/index.html","hash":"fed27d15d81a8c66da8a9f9129439e301c15e37e","modified":1632605953674},{"_id":"public/tags/release/index.html","hash":"b38ba974475bad88f9c7cd56b3870662db1cba92","modified":1632605953674},{"_id":"public/tags/devlog/index.html","hash":"e056df59164edb68e620bd980867687b429a6fbb","modified":1632605953674},{"_id":"public/images/favicon.png","hash":"3595958d6ada49061864107b341c6f39b456079f","modified":1632605783877},{"_id":"public/images/logo.png","hash":"e36010da438d83f70befc7815274166855a4a05f","modified":1632605783877},{"_id":"public/2021/09/25/devlog-september-2021/thumbnail-devlog-september-2021.png","hash":"4215ae5c0e9945da0b3b62398828ab2526c5db66","modified":1632605783877},{"_id":"public/css/custom.css","hash":"d562b79047912d4748a2c801354e0c85ba9166a7","modified":1632605783877},{"_id":"public/css/dark.css","hash":"80cbe96cab94ba0e56a6d28ba4690adc6ab0dc09","modified":1632605783877},{"_id":"public/css/prism-dark.css","hash":"a863888f03eff55e3088942d80a8d887376be2fa","modified":1632605783877},{"_id":"public/css/normalize.css","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1632605783877},{"_id":"public/css/skeleton.css","hash":"dbe52bedd2154562fec1788579fdbe552c77240d","modified":1632605783877},{"_id":"public/js/nanobar.min.js","hash":"fc30e613dbce5b1b5602907c0966739480456875","modified":1632605783877},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1632605783877},{"_id":"public/2021/07/21/beta-0-2-presentation/2021-07-21-wav2bar-0-2-beta-before-after.png","hash":"2f3ba2def59b309f1739ceb6ddb0a00dfd90a9be","modified":1632605783877},{"_id":"public/2021/07/21/beta-0-2-presentation/2021-07-21-162137-beta-0-2-glow-example.png","hash":"7fd539da7b282c9c9bbba679979de6caa78918b1","modified":1632605783877},{"_id":"public/2021/07/21/beta-0-2-presentation/2021-07-21-w2b-0-2-beta-color-picker.png","hash":"9012cac4ee500bf7adbb7d60de432f9ecac995f5","modified":1632605783877},{"_id":"public/2021/01/26/first-post/main_background.png","hash":"f4b6e4e9c0750d53a81f075d991df3b90542c2ba","modified":1632605783877},{"_id":"public/2021/07/21/beta-0-2-presentation/2021-07-21-155400-wav2bar-0-2-0-beta.png","hash":"ff657788629da4c7d377ea10ea52b56f9f2890aa","modified":1632605783877},{"_id":"public/2021/05/29/beta-0-1-and-general-update/thumbnail_wav2bar_showcase.jpg","hash":"086fae6c3cb51208e97c97b28c5422b3cf5de383","modified":1632605783877}],"Category":[{"name":"news","_id":"cku0bbxd60002vsune100gbuj"},{"name":"releases","parent":"cku0bbxd60002vsune100gbuj","_id":"cku0bbxdb0009vsun69nv6lju"},{"name":"devlogs","parent":"cku0bbxd60002vsune100gbuj","_id":"cku0bbxdg000tvsun5ilxcb3i"}],"Data":[],"Page":[],"Post":[{"title":"Introducing Wav2Bar Beta 0.2.0","date":"2021-07-21T16:01:35.000Z","updated":"2021-07-21T16:28:11.000Z","thumbnail":"2021-07-21-155400-wav2bar-0-2-0-beta.png","_content":"\n\nHi!\n\nWav2Bar 0.2.0 has just been released with multiple improvements to try out. Here is a quick tour over the major changes of this version. For detailed changelogs, see the [Github Releases page](https://github.com/Picorims/wav2bar/releases/tag/v0.2.0 \"Wav2Bar 0.2.0 changelogs\").\n\n## SVG Filters support\n\nSVG filters are now supported on all objects, which allows you to interact with the graphical output in many ways. ***This feature is useful if you want to add visual effects to an object: blur, glow, image correction, distortion, extrusion, outline, shadows, lighting, etc.*** For instance, the outlined visualizer of the thumbnail and the image blurring on the thumbnail have both been made with SVG filters!\n\nSVG filters are added by pasting them in a dedicated field. A filter is defined within a `<filter></filter>` tag, all separated by `[#]`. So multiple filters are added by entering `<filter></filter>[#]<filter></filter>[#]...`. Within a filter tag, you define the filter by following the SVG specification. Now, everyone is not an expert in SVG, and the syntax can be intimidating. Hopefully, there are many resources on the Internet to help you out crafting them:\n\n- [SVG Filter Builder](https://svgfilters.com/): A graphical user interface for making SVG filters. Paste the result between `<filter></filter>` to make it work with Wav2Bar. Alternatively, you can use other tools like Inkscape to make them.\n- [A compilation of useful resources to learn SVG filters](https://speckyboy.com/svg-filter-tutorials/ \"The 10 Best SVG Filter Resources & Tutorials\"): It also showcase what you can do with SVG filters.\n- [maketext.io](https://maketext.io/): Doesn't work out of the box, but great for inspiration.\n- [RIP Tutorial](https://riptutorial.com/svg/topic/3262/filters): Another tutorial with examples.\n\nThis is definitely not a feature for everyone, but if you want to push Wav2Bar into its limits, that's a good way to do it.\n\n### Simple example\n\nLets take the following filter:\n```svg\n<filter>\n    <feGaussianBlur stdDeviation=\"5.5\" result=\"coloredBlur\"/>\n    <feMerge>\n        <feMergeNode in=\"coloredBlur\"/>\n        <feMergeNode in=\"SourceGraphic\"/>\n    </feMerge> \n</filter>\n```\nThis filter produces a glow effect, by blurring the source, and drawing it behind. Here is the end result:\n\n{% asset_img 2021-07-21-162137-beta-0-2-glow-example.png Glow effect on a visualizer with SVG filters %}\n\n## User interface improvements\n\nThis update also includes improvements for the user interface, mainly for object interaction.\n\n{% asset_img 2021-07-21-wav2bar-0-2-beta-before-after.png Glow effect on a visualizer with SVG filters %}\n\nThe user interface is globally more compact to display more options on screen, without having to scroll too much. Everything is also more aligned to improve readability. In some cases, when an invalid value is entered by the user, it will show in red, meaning the value has been ignored as it is not valid. Right now it is only effective on number fields, however it may be extended to text fields in the future.\n\nSome new features have been introduced as well. ***Some shortcut buttons have been added to easily resize and position objects. A color picker has also been added.*** It only initialize with hex values, but support multiple formats (except alpha). You can still tweak the colors with the string field if you need to.\n\n{% asset_img 2021-07-21-w2b-0-2-beta-color-picker.png Glow effect on a visualizer with SVG filters %}\n\nSome small tweaks have also been made here and there.\n\n## Experimental export mode\n\nWhen Wav2Bar exports a video, it first generates all frames as images, and then combine them into a video. Right now, the PNG format is used, and video exporting is painfully slow.\n\nAs an experimentation, you can now choose to use JPEG images with 100% quality instead. ***While it shouldn't impact the video quality, it should however make the export generally two times faster, and sometimes up to six times faster!***. The difference in speed is visually noticeable when looking at the progress.\n\nKeeping the export window behind the main window can also improve exporting speed and performance.\n\n## Bug fixes\n\nMultiple bugs have been patched in this release. The most noticeable are listed below:\n- Changing the points count of a visualizer no longer breaks its display.\n- Text overline was not showing properly.\n- Updated the font size help bubble, that was outdated.\n- Removed \"audio not saved\" from the saving option title, this was only accurate in pre 0.1.0-beta releases. ***(Audio has always been saved in public releases!)***\n\n## What's next ?\n\nI will probably make a 0.2.x update adding CLI support for some basic tasks. While not very useful for most users, it can be useful for Linux users wanting to automate some tasks. It will also be useful for myself for development purposes.\n\nAs for 0.3.0, it will atleast include a major rewrite of objects. Right now, its structure is not sustainable on the long term, and should be more flexible and extendable. It is also a good opportunity to add some quality of life features to them. This update may or may not receive major features, as this is a big task. However it is a necessary step towards maybe adding new visualizers.\n\nEnjoy!\n\n~ Picorims","source":"_posts/beta-0-2-presentation.md","raw":"---\ntitle: Introducing Wav2Bar Beta 0.2.0\ncategories:\n- news\n- releases\ndate: 2021-07-21 18:01:35\nupdated: 2021-07-21 18:28:11\ntags:\n- news\n- beta\n- release\nthumbnail: 2021-07-21-155400-wav2bar-0-2-0-beta.png\n---\n\n\nHi!\n\nWav2Bar 0.2.0 has just been released with multiple improvements to try out. Here is a quick tour over the major changes of this version. For detailed changelogs, see the [Github Releases page](https://github.com/Picorims/wav2bar/releases/tag/v0.2.0 \"Wav2Bar 0.2.0 changelogs\").\n\n## SVG Filters support\n\nSVG filters are now supported on all objects, which allows you to interact with the graphical output in many ways. ***This feature is useful if you want to add visual effects to an object: blur, glow, image correction, distortion, extrusion, outline, shadows, lighting, etc.*** For instance, the outlined visualizer of the thumbnail and the image blurring on the thumbnail have both been made with SVG filters!\n\nSVG filters are added by pasting them in a dedicated field. A filter is defined within a `<filter></filter>` tag, all separated by `[#]`. So multiple filters are added by entering `<filter></filter>[#]<filter></filter>[#]...`. Within a filter tag, you define the filter by following the SVG specification. Now, everyone is not an expert in SVG, and the syntax can be intimidating. Hopefully, there are many resources on the Internet to help you out crafting them:\n\n- [SVG Filter Builder](https://svgfilters.com/): A graphical user interface for making SVG filters. Paste the result between `<filter></filter>` to make it work with Wav2Bar. Alternatively, you can use other tools like Inkscape to make them.\n- [A compilation of useful resources to learn SVG filters](https://speckyboy.com/svg-filter-tutorials/ \"The 10 Best SVG Filter Resources & Tutorials\"): It also showcase what you can do with SVG filters.\n- [maketext.io](https://maketext.io/): Doesn't work out of the box, but great for inspiration.\n- [RIP Tutorial](https://riptutorial.com/svg/topic/3262/filters): Another tutorial with examples.\n\nThis is definitely not a feature for everyone, but if you want to push Wav2Bar into its limits, that's a good way to do it.\n\n### Simple example\n\nLets take the following filter:\n```svg\n<filter>\n    <feGaussianBlur stdDeviation=\"5.5\" result=\"coloredBlur\"/>\n    <feMerge>\n        <feMergeNode in=\"coloredBlur\"/>\n        <feMergeNode in=\"SourceGraphic\"/>\n    </feMerge> \n</filter>\n```\nThis filter produces a glow effect, by blurring the source, and drawing it behind. Here is the end result:\n\n{% asset_img 2021-07-21-162137-beta-0-2-glow-example.png Glow effect on a visualizer with SVG filters %}\n\n## User interface improvements\n\nThis update also includes improvements for the user interface, mainly for object interaction.\n\n{% asset_img 2021-07-21-wav2bar-0-2-beta-before-after.png Glow effect on a visualizer with SVG filters %}\n\nThe user interface is globally more compact to display more options on screen, without having to scroll too much. Everything is also more aligned to improve readability. In some cases, when an invalid value is entered by the user, it will show in red, meaning the value has been ignored as it is not valid. Right now it is only effective on number fields, however it may be extended to text fields in the future.\n\nSome new features have been introduced as well. ***Some shortcut buttons have been added to easily resize and position objects. A color picker has also been added.*** It only initialize with hex values, but support multiple formats (except alpha). You can still tweak the colors with the string field if you need to.\n\n{% asset_img 2021-07-21-w2b-0-2-beta-color-picker.png Glow effect on a visualizer with SVG filters %}\n\nSome small tweaks have also been made here and there.\n\n## Experimental export mode\n\nWhen Wav2Bar exports a video, it first generates all frames as images, and then combine them into a video. Right now, the PNG format is used, and video exporting is painfully slow.\n\nAs an experimentation, you can now choose to use JPEG images with 100% quality instead. ***While it shouldn't impact the video quality, it should however make the export generally two times faster, and sometimes up to six times faster!***. The difference in speed is visually noticeable when looking at the progress.\n\nKeeping the export window behind the main window can also improve exporting speed and performance.\n\n## Bug fixes\n\nMultiple bugs have been patched in this release. The most noticeable are listed below:\n- Changing the points count of a visualizer no longer breaks its display.\n- Text overline was not showing properly.\n- Updated the font size help bubble, that was outdated.\n- Removed \"audio not saved\" from the saving option title, this was only accurate in pre 0.1.0-beta releases. ***(Audio has always been saved in public releases!)***\n\n## What's next ?\n\nI will probably make a 0.2.x update adding CLI support for some basic tasks. While not very useful for most users, it can be useful for Linux users wanting to automate some tasks. It will also be useful for myself for development purposes.\n\nAs for 0.3.0, it will atleast include a major rewrite of objects. Right now, its structure is not sustainable on the long term, and should be more flexible and extendable. It is also a good opportunity to add some quality of life features to them. This update may or may not receive major features, as this is a big task. However it is a necessary step towards maybe adding new visualizers.\n\nEnjoy!\n\n~ Picorims","slug":"beta-0-2-presentation","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cku0bbxd10000vsun1w2v0s8l","content":"<p>Hi!</p>\n<p>Wav2Bar 0.2.0 has just been released with multiple improvements to try out. Here is a quick tour over the major changes of this version. For detailed changelogs, see the <a href=\"https://github.com/Picorims/wav2bar/releases/tag/v0.2.0\" title=\"Wav2Bar 0.2.0 changelogs\">Github Releases page</a>.</p>\n<h2 id=\"SVG-Filters-support\"><a href=\"#SVG-Filters-support\" class=\"headerlink\" title=\"SVG Filters support\"></a>SVG Filters support</h2><p>SVG filters are now supported on all objects, which allows you to interact with the graphical output in many ways. <strong><em>This feature is useful if you want to add visual effects to an object: blur, glow, image correction, distortion, extrusion, outline, shadows, lighting, etc.</em></strong> For instance, the outlined visualizer of the thumbnail and the image blurring on the thumbnail have both been made with SVG filters!</p>\n<p>SVG filters are added by pasting them in a dedicated field. A filter is defined within a <code>&lt;filter&gt;&lt;/filter&gt;</code> tag, all separated by <code>[#]</code>. So multiple filters are added by entering <code>&lt;filter&gt;&lt;/filter&gt;[#]&lt;filter&gt;&lt;/filter&gt;[#]...</code>. Within a filter tag, you define the filter by following the SVG specification. Now, everyone is not an expert in SVG, and the syntax can be intimidating. Hopefully, there are many resources on the Internet to help you out crafting them:</p>\n<ul>\n<li><a href=\"https://svgfilters.com/\">SVG Filter Builder</a>: A graphical user interface for making SVG filters. Paste the result between <code>&lt;filter&gt;&lt;/filter&gt;</code> to make it work with Wav2Bar. Alternatively, you can use other tools like Inkscape to make them.</li>\n<li><a href=\"https://speckyboy.com/svg-filter-tutorials/\" title=\"The 10 Best SVG Filter Resources &amp; Tutorials\">A compilation of useful resources to learn SVG filters</a>: It also showcase what you can do with SVG filters.</li>\n<li><a href=\"https://maketext.io/\">maketext.io</a>: Doesn’t work out of the box, but great for inspiration.</li>\n<li><a href=\"https://riptutorial.com/svg/topic/3262/filters\">RIP Tutorial</a>: Another tutorial with examples.</li>\n</ul>\n<p>This is definitely not a feature for everyone, but if you want to push Wav2Bar into its limits, that’s a good way to do it.</p>\n<h3 id=\"Simple-example\"><a href=\"#Simple-example\" class=\"headerlink\" title=\"Simple example\"></a>Simple example</h3><p>Lets take the following filter:</p>\n<pre class=\"line-numbers language-svg\" data-language=\"svg\"><code class=\"language-svg\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feGaussianBlur</span> <span class=\"token attr-name\">stdDeviation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5.5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">result</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coloredBlur<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feMerge</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feMergeNode</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coloredBlur<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feMergeNode</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>feMerge</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This filter produces a glow effect, by blurring the source, and drawing it behind. Here is the end result:</p>\n<img src=\"/wav2bar-blog/public/2021/07/21/beta-0-2-presentation/2021-07-21-162137-beta-0-2-glow-example.png\" class=\"\" title=\"Glow effect on a visualizer with SVG filters\">\n\n<h2 id=\"User-interface-improvements\"><a href=\"#User-interface-improvements\" class=\"headerlink\" title=\"User interface improvements\"></a>User interface improvements</h2><p>This update also includes improvements for the user interface, mainly for object interaction.</p>\n<img src=\"/wav2bar-blog/public/2021/07/21/beta-0-2-presentation/2021-07-21-wav2bar-0-2-beta-before-after.png\" class=\"\" title=\"Glow effect on a visualizer with SVG filters\">\n\n<p>The user interface is globally more compact to display more options on screen, without having to scroll too much. Everything is also more aligned to improve readability. In some cases, when an invalid value is entered by the user, it will show in red, meaning the value has been ignored as it is not valid. Right now it is only effective on number fields, however it may be extended to text fields in the future.</p>\n<p>Some new features have been introduced as well. <strong><em>Some shortcut buttons have been added to easily resize and position objects. A color picker has also been added.</em></strong> It only initialize with hex values, but support multiple formats (except alpha). You can still tweak the colors with the string field if you need to.</p>\n<img src=\"/wav2bar-blog/public/2021/07/21/beta-0-2-presentation/2021-07-21-w2b-0-2-beta-color-picker.png\" class=\"\" title=\"Glow effect on a visualizer with SVG filters\">\n\n<p>Some small tweaks have also been made here and there.</p>\n<h2 id=\"Experimental-export-mode\"><a href=\"#Experimental-export-mode\" class=\"headerlink\" title=\"Experimental export mode\"></a>Experimental export mode</h2><p>When Wav2Bar exports a video, it first generates all frames as images, and then combine them into a video. Right now, the PNG format is used, and video exporting is painfully slow.</p>\n<p>As an experimentation, you can now choose to use JPEG images with 100% quality instead. <strong><em>While it shouldn’t impact the video quality, it should however make the export generally two times faster, and sometimes up to six times faster!</em></strong>. The difference in speed is visually noticeable when looking at the progress.</p>\n<p>Keeping the export window behind the main window can also improve exporting speed and performance.</p>\n<h2 id=\"Bug-fixes\"><a href=\"#Bug-fixes\" class=\"headerlink\" title=\"Bug fixes\"></a>Bug fixes</h2><p>Multiple bugs have been patched in this release. The most noticeable are listed below:</p>\n<ul>\n<li>Changing the points count of a visualizer no longer breaks its display.</li>\n<li>Text overline was not showing properly.</li>\n<li>Updated the font size help bubble, that was outdated.</li>\n<li>Removed “audio not saved” from the saving option title, this was only accurate in pre 0.1.0-beta releases. <strong><em>(Audio has always been saved in public releases!)</em></strong></li>\n</ul>\n<h2 id=\"What’s-next\"><a href=\"#What’s-next\" class=\"headerlink\" title=\"What’s next ?\"></a>What’s next ?</h2><p>I will probably make a 0.2.x update adding CLI support for some basic tasks. While not very useful for most users, it can be useful for Linux users wanting to automate some tasks. It will also be useful for myself for development purposes.</p>\n<p>As for 0.3.0, it will atleast include a major rewrite of objects. Right now, its structure is not sustainable on the long term, and should be more flexible and extendable. It is also a good opportunity to add some quality of life features to them. This update may or may not receive major features, as this is a big task. However it is a necessary step towards maybe adding new visualizers.</p>\n<p>Enjoy!</p>\n<p>~ Picorims</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi!</p>\n<p>Wav2Bar 0.2.0 has just been released with multiple improvements to try out. Here is a quick tour over the major changes of this version. For detailed changelogs, see the <a href=\"https://github.com/Picorims/wav2bar/releases/tag/v0.2.0\" title=\"Wav2Bar 0.2.0 changelogs\">Github Releases page</a>.</p>\n<h2 id=\"SVG-Filters-support\"><a href=\"#SVG-Filters-support\" class=\"headerlink\" title=\"SVG Filters support\"></a>SVG Filters support</h2><p>SVG filters are now supported on all objects, which allows you to interact with the graphical output in many ways. <strong><em>This feature is useful if you want to add visual effects to an object: blur, glow, image correction, distortion, extrusion, outline, shadows, lighting, etc.</em></strong> For instance, the outlined visualizer of the thumbnail and the image blurring on the thumbnail have both been made with SVG filters!</p>\n<p>SVG filters are added by pasting them in a dedicated field. A filter is defined within a <code>&lt;filter&gt;&lt;/filter&gt;</code> tag, all separated by <code>[#]</code>. So multiple filters are added by entering <code>&lt;filter&gt;&lt;/filter&gt;[#]&lt;filter&gt;&lt;/filter&gt;[#]...</code>. Within a filter tag, you define the filter by following the SVG specification. Now, everyone is not an expert in SVG, and the syntax can be intimidating. Hopefully, there are many resources on the Internet to help you out crafting them:</p>\n<ul>\n<li><a href=\"https://svgfilters.com/\">SVG Filter Builder</a>: A graphical user interface for making SVG filters. Paste the result between <code>&lt;filter&gt;&lt;/filter&gt;</code> to make it work with Wav2Bar. Alternatively, you can use other tools like Inkscape to make them.</li>\n<li><a href=\"https://speckyboy.com/svg-filter-tutorials/\" title=\"The 10 Best SVG Filter Resources &amp; Tutorials\">A compilation of useful resources to learn SVG filters</a>: It also showcase what you can do with SVG filters.</li>\n<li><a href=\"https://maketext.io/\">maketext.io</a>: Doesn’t work out of the box, but great for inspiration.</li>\n<li><a href=\"https://riptutorial.com/svg/topic/3262/filters\">RIP Tutorial</a>: Another tutorial with examples.</li>\n</ul>\n<p>This is definitely not a feature for everyone, but if you want to push Wav2Bar into its limits, that’s a good way to do it.</p>\n<h3 id=\"Simple-example\"><a href=\"#Simple-example\" class=\"headerlink\" title=\"Simple example\"></a>Simple example</h3><p>Lets take the following filter:</p>\n<pre class=\"line-numbers language-svg\" data-language=\"svg\"><code class=\"language-svg\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feGaussianBlur</span> <span class=\"token attr-name\">stdDeviation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5.5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">result</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coloredBlur<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feMerge</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feMergeNode</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coloredBlur<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feMergeNode</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>feMerge</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This filter produces a glow effect, by blurring the source, and drawing it behind. Here is the end result:</p>\n<img src=\"/wav2bar-blog/public/2021/07/21/beta-0-2-presentation/2021-07-21-162137-beta-0-2-glow-example.png\" class=\"\" title=\"Glow effect on a visualizer with SVG filters\">\n\n<h2 id=\"User-interface-improvements\"><a href=\"#User-interface-improvements\" class=\"headerlink\" title=\"User interface improvements\"></a>User interface improvements</h2><p>This update also includes improvements for the user interface, mainly for object interaction.</p>\n<img src=\"/wav2bar-blog/public/2021/07/21/beta-0-2-presentation/2021-07-21-wav2bar-0-2-beta-before-after.png\" class=\"\" title=\"Glow effect on a visualizer with SVG filters\">\n\n<p>The user interface is globally more compact to display more options on screen, without having to scroll too much. Everything is also more aligned to improve readability. In some cases, when an invalid value is entered by the user, it will show in red, meaning the value has been ignored as it is not valid. Right now it is only effective on number fields, however it may be extended to text fields in the future.</p>\n<p>Some new features have been introduced as well. <strong><em>Some shortcut buttons have been added to easily resize and position objects. A color picker has also been added.</em></strong> It only initialize with hex values, but support multiple formats (except alpha). You can still tweak the colors with the string field if you need to.</p>\n<img src=\"/wav2bar-blog/public/2021/07/21/beta-0-2-presentation/2021-07-21-w2b-0-2-beta-color-picker.png\" class=\"\" title=\"Glow effect on a visualizer with SVG filters\">\n\n<p>Some small tweaks have also been made here and there.</p>\n<h2 id=\"Experimental-export-mode\"><a href=\"#Experimental-export-mode\" class=\"headerlink\" title=\"Experimental export mode\"></a>Experimental export mode</h2><p>When Wav2Bar exports a video, it first generates all frames as images, and then combine them into a video. Right now, the PNG format is used, and video exporting is painfully slow.</p>\n<p>As an experimentation, you can now choose to use JPEG images with 100% quality instead. <strong><em>While it shouldn’t impact the video quality, it should however make the export generally two times faster, and sometimes up to six times faster!</em></strong>. The difference in speed is visually noticeable when looking at the progress.</p>\n<p>Keeping the export window behind the main window can also improve exporting speed and performance.</p>\n<h2 id=\"Bug-fixes\"><a href=\"#Bug-fixes\" class=\"headerlink\" title=\"Bug fixes\"></a>Bug fixes</h2><p>Multiple bugs have been patched in this release. The most noticeable are listed below:</p>\n<ul>\n<li>Changing the points count of a visualizer no longer breaks its display.</li>\n<li>Text overline was not showing properly.</li>\n<li>Updated the font size help bubble, that was outdated.</li>\n<li>Removed “audio not saved” from the saving option title, this was only accurate in pre 0.1.0-beta releases. <strong><em>(Audio has always been saved in public releases!)</em></strong></li>\n</ul>\n<h2 id=\"What’s-next\"><a href=\"#What’s-next\" class=\"headerlink\" title=\"What’s next ?\"></a>What’s next ?</h2><p>I will probably make a 0.2.x update adding CLI support for some basic tasks. While not very useful for most users, it can be useful for Linux users wanting to automate some tasks. It will also be useful for myself for development purposes.</p>\n<p>As for 0.3.0, it will atleast include a major rewrite of objects. Right now, its structure is not sustainable on the long term, and should be more flexible and extendable. It is also a good opportunity to add some quality of life features to them. This update may or may not receive major features, as this is a big task. However it is a necessary step towards maybe adding new visualizers.</p>\n<p>Enjoy!</p>\n<p>~ Picorims</p>\n"},{"title":"First post!","date":"2021-01-26T15:36:21.000Z","updated":"2021-01-27T20:19:04.856Z","thumbnail":"main_background.png","_content":"\n\nHi!\n\nI aim to release updates and changelogs for Wav2Bar on this blog page. The future will tell if it is successful or not... For now, here's a visualizer made in Wavbar (it's the thumbnail but nevermind, let's get familiar at integrating images):\n\n{% asset_img main_background.png Fancy dark visualizer made in Wav2Bar 0.1.0 indev %}","source":"_posts/first-post.md","raw":"---\ntitle: First post!\ncategories:\n- news\ndate: 2021-01-26 16:36:21\nupdated:\ntags:\n- news\nthumbnail: main_background.png\n---\n\n\nHi!\n\nI aim to release updates and changelogs for Wav2Bar on this blog page. The future will tell if it is successful or not... For now, here's a visualizer made in Wavbar (it's the thumbnail but nevermind, let's get familiar at integrating images):\n\n{% asset_img main_background.png Fancy dark visualizer made in Wav2Bar 0.1.0 indev %}","slug":"first-post","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cku0bbxd50001vsunhcoke0eq","content":"<p>Hi!</p>\n<p>I aim to release updates and changelogs for Wav2Bar on this blog page. The future will tell if it is successful or not… For now, here’s a visualizer made in Wavbar (it’s the thumbnail but nevermind, let’s get familiar at integrating images):</p>\n<img src=\"/wav2bar-blog/public/2021/01/26/first-post/main_background.png\" class=\"\" title=\"Fancy dark visualizer made in Wav2Bar 0.1.0 indev\">","site":{"data":{}},"excerpt":"","more":"<p>Hi!</p>\n<p>I aim to release updates and changelogs for Wav2Bar on this blog page. The future will tell if it is successful or not… For now, here’s a visualizer made in Wavbar (it’s the thumbnail but nevermind, let’s get familiar at integrating images):</p>\n<img src=\"/wav2bar-blog/public/2021/01/26/first-post/main_background.png\" class=\"\" title=\"Fancy dark visualizer made in Wav2Bar 0.1.0 indev\">"},{"title":"Beta 0.1 and general update","date":"2021-05-28T22:26:40.000Z","updated":"2021-09-24T20:00:27.808Z","thumbnail":"thumbnail_wav2bar_showcase.jpg","_content":"\n\nHi!\n\nThe first beta of Wav2Bar (0.1) has been released a month ago. In this post I will talk about the first impressions I have on this very first release, and give you an update on what you can expect in the future.\n\n## Wav2Bar 0.1 is out\n\nFirst things first, Wav2Bar 0.1 has been released in April 2021. This first beta includes everything that was originally intended to be in the final version (minus great UI). Allongside the package release, I also made a small showcase video about the current possibilities of the software (which you can watch [here](https://youtu.be/NWCe2zKY8Wo \"Wav2bar Showcase video\") if you haven't).\n\nIn this first beta, you will probably notice the user interface could really use some improvements, and that's normal. I firstly focused on having something that works, before diving too much in the UI (before working well, it has to work!). It will be improved throughout the next betas gradually. You probably also noticed that the video export can be very slow. I am aware of this problem, and while I have some ideas to try reducing it a tiny bit, it probably will stay like that for a while if not forever.\n\n## Answer to some feedback I received\n\nI didn't expect much feedback on the first release, especially as it has not been widely shared (a few social media posts and some shared links on Discord). A lot of commercial tools, online generators from templates and tutorials for these exists on the Internet, which makes it very difficult to be viewed anyway.\n\nFirstly I would like to give many thanks to the few people that tried it and provided direct feedback as well as some kind words about the project. It is very fullfilling to know it is helpful to some people! I also want to thanks those who stared the project on GitHub, that's not something I expected and it's also very motivating to see people interested in the project.\n\nNow, I also got some suggestions that I would like to share and talk about. Someone on GitHub suggested a Linux CLI for the tool. While this is just a too big task to handle for a solo driven project, I like the idea to be able to launch an export from the command line given a created project. That's not something I would implement anytime soon, but I put it in my todo list as a suggestion for a future update.\n\nSomeone by mail also suggested 2 things more graphical related. Firstly, he mentionned that the preview and the actual video could sometimes have differences in terms of rendering. While the objects are rendered the exact same way, the speed of the visualisation or the behavior of the particles can show some differences between the two. This is something that I am aware of, but that can't be fixed, due to how this is processed behind the scenes. The export performs a *\"delayed\"* rendering that renders each frame independently with strict respect of time. The preview however is performed by another API and is real time computation of the audio data. That means that if the FPS drop, the preview will inevitably be impacted because some frames are skipped, but the smoothing processes always base itself on the previous frame. I do not consider it an issue because, as the term preview imply, the goal is to give a precise enough idea of how the rendering will look, rather than live rendering how it will exactly look at export. While some improvements could surely be done, this would complexify the backend rendering, and right now refactoring the code and improving the user interface is in my opinion more important to deal with.\n\nSecondly, he also suggested to add support for some additional effects (besides the shadow feature). This is something I had in mind since the beginning but that I had planned for much later when the software would have evolved enough. However, I may come back on my decision and add it much earlier. On the technical side, it would be quite easy to support, as SVG filters exists for the web and vector graphics, and it can do pretty [impressive stuff](https://www.smashingmagazine.com/2015/05/why-the-svg-filter-is-awesome/ \"The Art Of SVG Filters And Why It Is Awesome\") when you know how to use it. On the UI side however, making UI to craft these would be very tedious and require probably months of development, considering all the available options. The compromise I see is to add support for plain text SVG filters, and let the user deal with external tools to craft them (such as [this one](https://svgfilters.client.io/ \"SVG Filter Builder\") called SVG Filter Builder).\n\n## What to expect in the future updates on the short term\n\n### The Git LFS issue\n\nBefore doing any new update, I have to fix an issue related to Git LFS. I discovered (with quite a lot of frustration because it is not mentioned anywhere, and is hidden in obscure sub menus until the day you receive a mail telling that you used 80% of the bandwidth) that GitHub impose 1GB of bandwidth for Git LFS downloads. Considering GitHub requires Git LFS for everything that is bigger than 100MB (and the Electron framework has a 100MB executable itself), that means nobody (not even me) can download Git LFS assets more than about 8 times a month. If I do, it is locked until next month. This include git clones, zip download from the front page of the project (green download button), but also forks and everything done on them. This is not sustainable at all on the long term, and paying $5 per month for 50Gb of bandwidth isn't worth it at all (what if it becomes not enough again?).\n\nTo address this issue, I will get rid of the node_modules folder and manually add the source code archive in future releases. I will also remove FFmpeg from the repository (It was not tracked anymore since a while back but still exists on the remote master branch, but there is absolutely no reason for it not to go away). Basically, I will just get rid of Git LFS from the entire project. However, I have to make sure to do it right, and try not to mess up the repository when doing so. That's why I will do it when I have enough free time to do it without too much pressure or stress. That also means no new beta will be published before this is addressed.\n\n### What is planned in the near future\n\nRight now, the main goals are to gradually refactor the code behind the scenes and mostly work on the user interface. In the next major beta (0.2), one of the improvements that I'd especially like to bring would be to improve size and position interaction in the control panel (for example, one click centering without having to do it approximately or to open the calculator). There might be a color picker as well, but I'm not yet sure the way I want to implement it (web version or more advanced one from an external library).\n\nI will also experiment with SVG filters and see if I can bring it as an experimental feature as well. What this means is that support for all kinds of masks and (static) effects could be possible on all objects, allowing stuff like color manipulation, source manipulation (for shadows, offsets, extrusion...), applying effects like blur or distortion, noise based effects, etc. If that is a success, it could be a pretty big improvement to the rendering capabilities! Animated SVG filters however won't work, due to the way the export rendering works.\n\nI will also make a small experiment on the export rendering to see if I can slightly improve performances by choosing .jpg over .png for screenshots. I have no expectations but want to see if it can have an impact (while keeping in mind the rendering quality of course).\n\n## May and June are (going to be) calm\n\nSince Wav2Bar 0.1.1, you might have noticed there have been pretty much no changes done, and that's because May and June are extremely busy for me. I have right now many university projects to deal with, and also started to get seriously behind with university work for personal reasons (mostly due to permanent high speed in all subjects). For that reason and to avoid burnout, I need to put Wav2Bar on the side until I'm done with this year's exams.\n\nHowever, I remain available to answer [issue reports and feature requests on GitHub](https://github.com/Picorims/wav2bar/issues). You can also reach me more directly on the [Discord Server](https://discord.gg/EVGzfdP) or by mail.\n\nThat's about it for this post, enjoy your day/night :).\n\n~ Picorims","source":"_posts/beta-0-1-and-general-update.md","raw":"---\ntitle: Beta 0.1 and general update\ncategories:\n- news\n- releases\ndate: 2021-05-29 00:26:40\nupdated:\ntags:\n- news\n- beta\n- release\nthumbnail: thumbnail_wav2bar_showcase.jpg\n---\n\n\nHi!\n\nThe first beta of Wav2Bar (0.1) has been released a month ago. In this post I will talk about the first impressions I have on this very first release, and give you an update on what you can expect in the future.\n\n## Wav2Bar 0.1 is out\n\nFirst things first, Wav2Bar 0.1 has been released in April 2021. This first beta includes everything that was originally intended to be in the final version (minus great UI). Allongside the package release, I also made a small showcase video about the current possibilities of the software (which you can watch [here](https://youtu.be/NWCe2zKY8Wo \"Wav2bar Showcase video\") if you haven't).\n\nIn this first beta, you will probably notice the user interface could really use some improvements, and that's normal. I firstly focused on having something that works, before diving too much in the UI (before working well, it has to work!). It will be improved throughout the next betas gradually. You probably also noticed that the video export can be very slow. I am aware of this problem, and while I have some ideas to try reducing it a tiny bit, it probably will stay like that for a while if not forever.\n\n## Answer to some feedback I received\n\nI didn't expect much feedback on the first release, especially as it has not been widely shared (a few social media posts and some shared links on Discord). A lot of commercial tools, online generators from templates and tutorials for these exists on the Internet, which makes it very difficult to be viewed anyway.\n\nFirstly I would like to give many thanks to the few people that tried it and provided direct feedback as well as some kind words about the project. It is very fullfilling to know it is helpful to some people! I also want to thanks those who stared the project on GitHub, that's not something I expected and it's also very motivating to see people interested in the project.\n\nNow, I also got some suggestions that I would like to share and talk about. Someone on GitHub suggested a Linux CLI for the tool. While this is just a too big task to handle for a solo driven project, I like the idea to be able to launch an export from the command line given a created project. That's not something I would implement anytime soon, but I put it in my todo list as a suggestion for a future update.\n\nSomeone by mail also suggested 2 things more graphical related. Firstly, he mentionned that the preview and the actual video could sometimes have differences in terms of rendering. While the objects are rendered the exact same way, the speed of the visualisation or the behavior of the particles can show some differences between the two. This is something that I am aware of, but that can't be fixed, due to how this is processed behind the scenes. The export performs a *\"delayed\"* rendering that renders each frame independently with strict respect of time. The preview however is performed by another API and is real time computation of the audio data. That means that if the FPS drop, the preview will inevitably be impacted because some frames are skipped, but the smoothing processes always base itself on the previous frame. I do not consider it an issue because, as the term preview imply, the goal is to give a precise enough idea of how the rendering will look, rather than live rendering how it will exactly look at export. While some improvements could surely be done, this would complexify the backend rendering, and right now refactoring the code and improving the user interface is in my opinion more important to deal with.\n\nSecondly, he also suggested to add support for some additional effects (besides the shadow feature). This is something I had in mind since the beginning but that I had planned for much later when the software would have evolved enough. However, I may come back on my decision and add it much earlier. On the technical side, it would be quite easy to support, as SVG filters exists for the web and vector graphics, and it can do pretty [impressive stuff](https://www.smashingmagazine.com/2015/05/why-the-svg-filter-is-awesome/ \"The Art Of SVG Filters And Why It Is Awesome\") when you know how to use it. On the UI side however, making UI to craft these would be very tedious and require probably months of development, considering all the available options. The compromise I see is to add support for plain text SVG filters, and let the user deal with external tools to craft them (such as [this one](https://svgfilters.client.io/ \"SVG Filter Builder\") called SVG Filter Builder).\n\n## What to expect in the future updates on the short term\n\n### The Git LFS issue\n\nBefore doing any new update, I have to fix an issue related to Git LFS. I discovered (with quite a lot of frustration because it is not mentioned anywhere, and is hidden in obscure sub menus until the day you receive a mail telling that you used 80% of the bandwidth) that GitHub impose 1GB of bandwidth for Git LFS downloads. Considering GitHub requires Git LFS for everything that is bigger than 100MB (and the Electron framework has a 100MB executable itself), that means nobody (not even me) can download Git LFS assets more than about 8 times a month. If I do, it is locked until next month. This include git clones, zip download from the front page of the project (green download button), but also forks and everything done on them. This is not sustainable at all on the long term, and paying $5 per month for 50Gb of bandwidth isn't worth it at all (what if it becomes not enough again?).\n\nTo address this issue, I will get rid of the node_modules folder and manually add the source code archive in future releases. I will also remove FFmpeg from the repository (It was not tracked anymore since a while back but still exists on the remote master branch, but there is absolutely no reason for it not to go away). Basically, I will just get rid of Git LFS from the entire project. However, I have to make sure to do it right, and try not to mess up the repository when doing so. That's why I will do it when I have enough free time to do it without too much pressure or stress. That also means no new beta will be published before this is addressed.\n\n### What is planned in the near future\n\nRight now, the main goals are to gradually refactor the code behind the scenes and mostly work on the user interface. In the next major beta (0.2), one of the improvements that I'd especially like to bring would be to improve size and position interaction in the control panel (for example, one click centering without having to do it approximately or to open the calculator). There might be a color picker as well, but I'm not yet sure the way I want to implement it (web version or more advanced one from an external library).\n\nI will also experiment with SVG filters and see if I can bring it as an experimental feature as well. What this means is that support for all kinds of masks and (static) effects could be possible on all objects, allowing stuff like color manipulation, source manipulation (for shadows, offsets, extrusion...), applying effects like blur or distortion, noise based effects, etc. If that is a success, it could be a pretty big improvement to the rendering capabilities! Animated SVG filters however won't work, due to the way the export rendering works.\n\nI will also make a small experiment on the export rendering to see if I can slightly improve performances by choosing .jpg over .png for screenshots. I have no expectations but want to see if it can have an impact (while keeping in mind the rendering quality of course).\n\n## May and June are (going to be) calm\n\nSince Wav2Bar 0.1.1, you might have noticed there have been pretty much no changes done, and that's because May and June are extremely busy for me. I have right now many university projects to deal with, and also started to get seriously behind with university work for personal reasons (mostly due to permanent high speed in all subjects). For that reason and to avoid burnout, I need to put Wav2Bar on the side until I'm done with this year's exams.\n\nHowever, I remain available to answer [issue reports and feature requests on GitHub](https://github.com/Picorims/wav2bar/issues). You can also reach me more directly on the [Discord Server](https://discord.gg/EVGzfdP) or by mail.\n\nThat's about it for this post, enjoy your day/night :).\n\n~ Picorims","slug":"beta-0-1-and-general-update","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cku0bbxd70004vsun2hxt5gzw","content":"<p>Hi!</p>\n<p>The first beta of Wav2Bar (0.1) has been released a month ago. In this post I will talk about the first impressions I have on this very first release, and give you an update on what you can expect in the future.</p>\n<h2 id=\"Wav2Bar-0-1-is-out\"><a href=\"#Wav2Bar-0-1-is-out\" class=\"headerlink\" title=\"Wav2Bar 0.1 is out\"></a>Wav2Bar 0.1 is out</h2><p>First things first, Wav2Bar 0.1 has been released in April 2021. This first beta includes everything that was originally intended to be in the final version (minus great UI). Allongside the package release, I also made a small showcase video about the current possibilities of the software (which you can watch <a href=\"https://youtu.be/NWCe2zKY8Wo\" title=\"Wav2bar Showcase video\">here</a> if you haven’t).</p>\n<p>In this first beta, you will probably notice the user interface could really use some improvements, and that’s normal. I firstly focused on having something that works, before diving too much in the UI (before working well, it has to work!). It will be improved throughout the next betas gradually. You probably also noticed that the video export can be very slow. I am aware of this problem, and while I have some ideas to try reducing it a tiny bit, it probably will stay like that for a while if not forever.</p>\n<h2 id=\"Answer-to-some-feedback-I-received\"><a href=\"#Answer-to-some-feedback-I-received\" class=\"headerlink\" title=\"Answer to some feedback I received\"></a>Answer to some feedback I received</h2><p>I didn’t expect much feedback on the first release, especially as it has not been widely shared (a few social media posts and some shared links on Discord). A lot of commercial tools, online generators from templates and tutorials for these exists on the Internet, which makes it very difficult to be viewed anyway.</p>\n<p>Firstly I would like to give many thanks to the few people that tried it and provided direct feedback as well as some kind words about the project. It is very fullfilling to know it is helpful to some people! I also want to thanks those who stared the project on GitHub, that’s not something I expected and it’s also very motivating to see people interested in the project.</p>\n<p>Now, I also got some suggestions that I would like to share and talk about. Someone on GitHub suggested a Linux CLI for the tool. While this is just a too big task to handle for a solo driven project, I like the idea to be able to launch an export from the command line given a created project. That’s not something I would implement anytime soon, but I put it in my todo list as a suggestion for a future update.</p>\n<p>Someone by mail also suggested 2 things more graphical related. Firstly, he mentionned that the preview and the actual video could sometimes have differences in terms of rendering. While the objects are rendered the exact same way, the speed of the visualisation or the behavior of the particles can show some differences between the two. This is something that I am aware of, but that can’t be fixed, due to how this is processed behind the scenes. The export performs a <em>“delayed”</em> rendering that renders each frame independently with strict respect of time. The preview however is performed by another API and is real time computation of the audio data. That means that if the FPS drop, the preview will inevitably be impacted because some frames are skipped, but the smoothing processes always base itself on the previous frame. I do not consider it an issue because, as the term preview imply, the goal is to give a precise enough idea of how the rendering will look, rather than live rendering how it will exactly look at export. While some improvements could surely be done, this would complexify the backend rendering, and right now refactoring the code and improving the user interface is in my opinion more important to deal with.</p>\n<p>Secondly, he also suggested to add support for some additional effects (besides the shadow feature). This is something I had in mind since the beginning but that I had planned for much later when the software would have evolved enough. However, I may come back on my decision and add it much earlier. On the technical side, it would be quite easy to support, as SVG filters exists for the web and vector graphics, and it can do pretty <a href=\"https://www.smashingmagazine.com/2015/05/why-the-svg-filter-is-awesome/\" title=\"The Art Of SVG Filters And Why It Is Awesome\">impressive stuff</a> when you know how to use it. On the UI side however, making UI to craft these would be very tedious and require probably months of development, considering all the available options. The compromise I see is to add support for plain text SVG filters, and let the user deal with external tools to craft them (such as <a href=\"https://svgfilters.client.io/\" title=\"SVG Filter Builder\">this one</a> called SVG Filter Builder).</p>\n<h2 id=\"What-to-expect-in-the-future-updates-on-the-short-term\"><a href=\"#What-to-expect-in-the-future-updates-on-the-short-term\" class=\"headerlink\" title=\"What to expect in the future updates on the short term\"></a>What to expect in the future updates on the short term</h2><h3 id=\"The-Git-LFS-issue\"><a href=\"#The-Git-LFS-issue\" class=\"headerlink\" title=\"The Git LFS issue\"></a>The Git LFS issue</h3><p>Before doing any new update, I have to fix an issue related to Git LFS. I discovered (with quite a lot of frustration because it is not mentioned anywhere, and is hidden in obscure sub menus until the day you receive a mail telling that you used 80% of the bandwidth) that GitHub impose 1GB of bandwidth for Git LFS downloads. Considering GitHub requires Git LFS for everything that is bigger than 100MB (and the Electron framework has a 100MB executable itself), that means nobody (not even me) can download Git LFS assets more than about 8 times a month. If I do, it is locked until next month. This include git clones, zip download from the front page of the project (green download button), but also forks and everything done on them. This is not sustainable at all on the long term, and paying $5 per month for 50Gb of bandwidth isn’t worth it at all (what if it becomes not enough again?).</p>\n<p>To address this issue, I will get rid of the node_modules folder and manually add the source code archive in future releases. I will also remove FFmpeg from the repository (It was not tracked anymore since a while back but still exists on the remote master branch, but there is absolutely no reason for it not to go away). Basically, I will just get rid of Git LFS from the entire project. However, I have to make sure to do it right, and try not to mess up the repository when doing so. That’s why I will do it when I have enough free time to do it without too much pressure or stress. That also means no new beta will be published before this is addressed.</p>\n<h3 id=\"What-is-planned-in-the-near-future\"><a href=\"#What-is-planned-in-the-near-future\" class=\"headerlink\" title=\"What is planned in the near future\"></a>What is planned in the near future</h3><p>Right now, the main goals are to gradually refactor the code behind the scenes and mostly work on the user interface. In the next major beta (0.2), one of the improvements that I’d especially like to bring would be to improve size and position interaction in the control panel (for example, one click centering without having to do it approximately or to open the calculator). There might be a color picker as well, but I’m not yet sure the way I want to implement it (web version or more advanced one from an external library).</p>\n<p>I will also experiment with SVG filters and see if I can bring it as an experimental feature as well. What this means is that support for all kinds of masks and (static) effects could be possible on all objects, allowing stuff like color manipulation, source manipulation (for shadows, offsets, extrusion…), applying effects like blur or distortion, noise based effects, etc. If that is a success, it could be a pretty big improvement to the rendering capabilities! Animated SVG filters however won’t work, due to the way the export rendering works.</p>\n<p>I will also make a small experiment on the export rendering to see if I can slightly improve performances by choosing .jpg over .png for screenshots. I have no expectations but want to see if it can have an impact (while keeping in mind the rendering quality of course).</p>\n<h2 id=\"May-and-June-are-going-to-be-calm\"><a href=\"#May-and-June-are-going-to-be-calm\" class=\"headerlink\" title=\"May and June are (going to be) calm\"></a>May and June are (going to be) calm</h2><p>Since Wav2Bar 0.1.1, you might have noticed there have been pretty much no changes done, and that’s because May and June are extremely busy for me. I have right now many university projects to deal with, and also started to get seriously behind with university work for personal reasons (mostly due to permanent high speed in all subjects). For that reason and to avoid burnout, I need to put Wav2Bar on the side until I’m done with this year’s exams.</p>\n<p>However, I remain available to answer <a href=\"https://github.com/Picorims/wav2bar/issues\">issue reports and feature requests on GitHub</a>. You can also reach me more directly on the <a href=\"https://discord.gg/EVGzfdP\">Discord Server</a> or by mail.</p>\n<p>That’s about it for this post, enjoy your day/night :).</p>\n<p>~ Picorims</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi!</p>\n<p>The first beta of Wav2Bar (0.1) has been released a month ago. In this post I will talk about the first impressions I have on this very first release, and give you an update on what you can expect in the future.</p>\n<h2 id=\"Wav2Bar-0-1-is-out\"><a href=\"#Wav2Bar-0-1-is-out\" class=\"headerlink\" title=\"Wav2Bar 0.1 is out\"></a>Wav2Bar 0.1 is out</h2><p>First things first, Wav2Bar 0.1 has been released in April 2021. This first beta includes everything that was originally intended to be in the final version (minus great UI). Allongside the package release, I also made a small showcase video about the current possibilities of the software (which you can watch <a href=\"https://youtu.be/NWCe2zKY8Wo\" title=\"Wav2bar Showcase video\">here</a> if you haven’t).</p>\n<p>In this first beta, you will probably notice the user interface could really use some improvements, and that’s normal. I firstly focused on having something that works, before diving too much in the UI (before working well, it has to work!). It will be improved throughout the next betas gradually. You probably also noticed that the video export can be very slow. I am aware of this problem, and while I have some ideas to try reducing it a tiny bit, it probably will stay like that for a while if not forever.</p>\n<h2 id=\"Answer-to-some-feedback-I-received\"><a href=\"#Answer-to-some-feedback-I-received\" class=\"headerlink\" title=\"Answer to some feedback I received\"></a>Answer to some feedback I received</h2><p>I didn’t expect much feedback on the first release, especially as it has not been widely shared (a few social media posts and some shared links on Discord). A lot of commercial tools, online generators from templates and tutorials for these exists on the Internet, which makes it very difficult to be viewed anyway.</p>\n<p>Firstly I would like to give many thanks to the few people that tried it and provided direct feedback as well as some kind words about the project. It is very fullfilling to know it is helpful to some people! I also want to thanks those who stared the project on GitHub, that’s not something I expected and it’s also very motivating to see people interested in the project.</p>\n<p>Now, I also got some suggestions that I would like to share and talk about. Someone on GitHub suggested a Linux CLI for the tool. While this is just a too big task to handle for a solo driven project, I like the idea to be able to launch an export from the command line given a created project. That’s not something I would implement anytime soon, but I put it in my todo list as a suggestion for a future update.</p>\n<p>Someone by mail also suggested 2 things more graphical related. Firstly, he mentionned that the preview and the actual video could sometimes have differences in terms of rendering. While the objects are rendered the exact same way, the speed of the visualisation or the behavior of the particles can show some differences between the two. This is something that I am aware of, but that can’t be fixed, due to how this is processed behind the scenes. The export performs a <em>“delayed”</em> rendering that renders each frame independently with strict respect of time. The preview however is performed by another API and is real time computation of the audio data. That means that if the FPS drop, the preview will inevitably be impacted because some frames are skipped, but the smoothing processes always base itself on the previous frame. I do not consider it an issue because, as the term preview imply, the goal is to give a precise enough idea of how the rendering will look, rather than live rendering how it will exactly look at export. While some improvements could surely be done, this would complexify the backend rendering, and right now refactoring the code and improving the user interface is in my opinion more important to deal with.</p>\n<p>Secondly, he also suggested to add support for some additional effects (besides the shadow feature). This is something I had in mind since the beginning but that I had planned for much later when the software would have evolved enough. However, I may come back on my decision and add it much earlier. On the technical side, it would be quite easy to support, as SVG filters exists for the web and vector graphics, and it can do pretty <a href=\"https://www.smashingmagazine.com/2015/05/why-the-svg-filter-is-awesome/\" title=\"The Art Of SVG Filters And Why It Is Awesome\">impressive stuff</a> when you know how to use it. On the UI side however, making UI to craft these would be very tedious and require probably months of development, considering all the available options. The compromise I see is to add support for plain text SVG filters, and let the user deal with external tools to craft them (such as <a href=\"https://svgfilters.client.io/\" title=\"SVG Filter Builder\">this one</a> called SVG Filter Builder).</p>\n<h2 id=\"What-to-expect-in-the-future-updates-on-the-short-term\"><a href=\"#What-to-expect-in-the-future-updates-on-the-short-term\" class=\"headerlink\" title=\"What to expect in the future updates on the short term\"></a>What to expect in the future updates on the short term</h2><h3 id=\"The-Git-LFS-issue\"><a href=\"#The-Git-LFS-issue\" class=\"headerlink\" title=\"The Git LFS issue\"></a>The Git LFS issue</h3><p>Before doing any new update, I have to fix an issue related to Git LFS. I discovered (with quite a lot of frustration because it is not mentioned anywhere, and is hidden in obscure sub menus until the day you receive a mail telling that you used 80% of the bandwidth) that GitHub impose 1GB of bandwidth for Git LFS downloads. Considering GitHub requires Git LFS for everything that is bigger than 100MB (and the Electron framework has a 100MB executable itself), that means nobody (not even me) can download Git LFS assets more than about 8 times a month. If I do, it is locked until next month. This include git clones, zip download from the front page of the project (green download button), but also forks and everything done on them. This is not sustainable at all on the long term, and paying $5 per month for 50Gb of bandwidth isn’t worth it at all (what if it becomes not enough again?).</p>\n<p>To address this issue, I will get rid of the node_modules folder and manually add the source code archive in future releases. I will also remove FFmpeg from the repository (It was not tracked anymore since a while back but still exists on the remote master branch, but there is absolutely no reason for it not to go away). Basically, I will just get rid of Git LFS from the entire project. However, I have to make sure to do it right, and try not to mess up the repository when doing so. That’s why I will do it when I have enough free time to do it without too much pressure or stress. That also means no new beta will be published before this is addressed.</p>\n<h3 id=\"What-is-planned-in-the-near-future\"><a href=\"#What-is-planned-in-the-near-future\" class=\"headerlink\" title=\"What is planned in the near future\"></a>What is planned in the near future</h3><p>Right now, the main goals are to gradually refactor the code behind the scenes and mostly work on the user interface. In the next major beta (0.2), one of the improvements that I’d especially like to bring would be to improve size and position interaction in the control panel (for example, one click centering without having to do it approximately or to open the calculator). There might be a color picker as well, but I’m not yet sure the way I want to implement it (web version or more advanced one from an external library).</p>\n<p>I will also experiment with SVG filters and see if I can bring it as an experimental feature as well. What this means is that support for all kinds of masks and (static) effects could be possible on all objects, allowing stuff like color manipulation, source manipulation (for shadows, offsets, extrusion…), applying effects like blur or distortion, noise based effects, etc. If that is a success, it could be a pretty big improvement to the rendering capabilities! Animated SVG filters however won’t work, due to the way the export rendering works.</p>\n<p>I will also make a small experiment on the export rendering to see if I can slightly improve performances by choosing .jpg over .png for screenshots. I have no expectations but want to see if it can have an impact (while keeping in mind the rendering quality of course).</p>\n<h2 id=\"May-and-June-are-going-to-be-calm\"><a href=\"#May-and-June-are-going-to-be-calm\" class=\"headerlink\" title=\"May and June are (going to be) calm\"></a>May and June are (going to be) calm</h2><p>Since Wav2Bar 0.1.1, you might have noticed there have been pretty much no changes done, and that’s because May and June are extremely busy for me. I have right now many university projects to deal with, and also started to get seriously behind with university work for personal reasons (mostly due to permanent high speed in all subjects). For that reason and to avoid burnout, I need to put Wav2Bar on the side until I’m done with this year’s exams.</p>\n<p>However, I remain available to answer <a href=\"https://github.com/Picorims/wav2bar/issues\">issue reports and feature requests on GitHub</a>. You can also reach me more directly on the <a href=\"https://discord.gg/EVGzfdP\">Discord Server</a> or by mail.</p>\n<p>That’s about it for this post, enjoy your day/night :).</p>\n<p>~ Picorims</p>\n"},{"title":"Devlog - September 2021","date":"2021-09-25T21:21:51.000Z","updated":"2021-09-25T21:21:51.000Z","thumbnail":"thumbnail-devlog-september-2021.png","_content":"\nHi!\n\nI have been quite silent since Wav2Bar 0.2.0 release on July. I think now is a good opportunity to let you know how things are going, as well as giving plans for the next month. Let's get started!\n\n## On going and planned updates\n\n### Wav2Bar 0.3.0 development\n\nWav2Bar 0.3.0 development Started in early August. This update is mostly a technical update, and thus for many reasons.\n\nIn the current implementation, each object has its own independent setup. That means that every time a change has to be made, it has to be repeated for every objects, which is very time consuming. Right now there are six available objects, so common changes and bug fixes have to be made six times. Let's be honest, this is absolutely not sustainable on the long term. That's why some heavy refactoring is being made in the background since August.\n\nThat said refactoring has been almost finished this week. So I would say add that one third of the update has been completed. I know this is taking a lot of times, but this is necessary to be able to implement new visualizers. So what else has to be made?\n\n### Roadmap\n\nHere is a roadmap of the future updates and planned features. This roadmap is absolutely not set in stone, and is subject to changes if needed as the times goes. But this should give you a good picture of what direction development is taking.\n\n- **0.3.0**\n    - **Write converter to new save format.** With the heavy refactoring, the inner structure of saves has changed quite a lot. So there is some work to do so support older saves.\n    - **Fix 0.2.2 issue where opening a new project doesn't clean up old objects' interface.**\n    - **Hide/show object feature.** This quality of life feature would help focusing on specific objects during design. I don't know yet if this will be saved or not.\n    - **Some layout fixes.** Updating the framework used to make Wav2Bar, Electron, introduced some quirks in the UI. It is also the opportunity to fix very small issues like the fact that the top audio controls take a lot of space. That make the screen less easily visible completely.\n    - **Display object borders on hovering of its settings.** It is not always easy to see the boundaries of an object (like particle flow objects), which doesn't help setting its size. This feature aim to fix this.\n- **0.3.1**\n    - **convert CLI command.** This quick command would convert the save to a newer said version. I also consider a potential folder support to make migrations easier if you like to keep up to date saves.\n    - **Keep track of last used folder in file explorer.** Because always starting from home folder and doing all the clicks again is annoying!\n- **0.4.0**\n    - **Continue internal refactoring, but less.** Some last changes have to be made in objects property handling so the rest listed below is easier to do.\n    - **New visualizers.** Yes. Finally. Two would be a great goal to start with. I need to experiment stuff.\n    - **Extend existing objects customization.** That includes more options for text and particle flows.\n- **0.4.1**\n    - **favorite folders in file explorer.** This can act as shortcuts.\n- **Box of ideas for the future (i.e possible but not confirmed)**\n    - full CLI with dedicated terminal and script reading\n    - more particle options\n    - gradient UI\n    - custom color picker\n    - more visualizers\n    - better linux support (once I find the good moment to setup a Linux dev environment)\n    - keyboard shortcuts\n    - mouse interactions to manipulate objects\n    - translations\n    - helper to make cool designs by picking between choices.\n    - factory templates\n    - More accurate preview (time based instead of frame based)\n\n## Cool, when does it come ?\n\nAs always, because I am the only maintainer and developer of Wav2Bar, and as this is done on my free time, this depends of multiple factors. That includes workload given by the university, my physical health (wrists specifically if you are familiar with RSI), and the rest of life. I am doing my best to push this project forward and satisfy requests, but I also need to find balance with life, that goes without saying.\n\n## Contribution\n\nI will be preparing a CONTRIBUTING.md file on GitHub soon primarily for documentation on the project, but also to get something if someone would ever be interested to contribute. If it is your case, please contact me at picorims.contact@gmail.com so we can discuss the topic (in the current state it is not ready for that, in terms of git branches).","source":"_posts/devlog-september-2021.md","raw":"---\ntitle: Devlog - September 2021\ncategories:\n- news\n- devlogs\ndate: 2021-09-25 23:21:51\nupdated: 2021-09-25 23:21:51\ntags:\n- news\n- beta\n- devlog\nthumbnail: thumbnail-devlog-september-2021.png\n---\n\nHi!\n\nI have been quite silent since Wav2Bar 0.2.0 release on July. I think now is a good opportunity to let you know how things are going, as well as giving plans for the next month. Let's get started!\n\n## On going and planned updates\n\n### Wav2Bar 0.3.0 development\n\nWav2Bar 0.3.0 development Started in early August. This update is mostly a technical update, and thus for many reasons.\n\nIn the current implementation, each object has its own independent setup. That means that every time a change has to be made, it has to be repeated for every objects, which is very time consuming. Right now there are six available objects, so common changes and bug fixes have to be made six times. Let's be honest, this is absolutely not sustainable on the long term. That's why some heavy refactoring is being made in the background since August.\n\nThat said refactoring has been almost finished this week. So I would say add that one third of the update has been completed. I know this is taking a lot of times, but this is necessary to be able to implement new visualizers. So what else has to be made?\n\n### Roadmap\n\nHere is a roadmap of the future updates and planned features. This roadmap is absolutely not set in stone, and is subject to changes if needed as the times goes. But this should give you a good picture of what direction development is taking.\n\n- **0.3.0**\n    - **Write converter to new save format.** With the heavy refactoring, the inner structure of saves has changed quite a lot. So there is some work to do so support older saves.\n    - **Fix 0.2.2 issue where opening a new project doesn't clean up old objects' interface.**\n    - **Hide/show object feature.** This quality of life feature would help focusing on specific objects during design. I don't know yet if this will be saved or not.\n    - **Some layout fixes.** Updating the framework used to make Wav2Bar, Electron, introduced some quirks in the UI. It is also the opportunity to fix very small issues like the fact that the top audio controls take a lot of space. That make the screen less easily visible completely.\n    - **Display object borders on hovering of its settings.** It is not always easy to see the boundaries of an object (like particle flow objects), which doesn't help setting its size. This feature aim to fix this.\n- **0.3.1**\n    - **convert CLI command.** This quick command would convert the save to a newer said version. I also consider a potential folder support to make migrations easier if you like to keep up to date saves.\n    - **Keep track of last used folder in file explorer.** Because always starting from home folder and doing all the clicks again is annoying!\n- **0.4.0**\n    - **Continue internal refactoring, but less.** Some last changes have to be made in objects property handling so the rest listed below is easier to do.\n    - **New visualizers.** Yes. Finally. Two would be a great goal to start with. I need to experiment stuff.\n    - **Extend existing objects customization.** That includes more options for text and particle flows.\n- **0.4.1**\n    - **favorite folders in file explorer.** This can act as shortcuts.\n- **Box of ideas for the future (i.e possible but not confirmed)**\n    - full CLI with dedicated terminal and script reading\n    - more particle options\n    - gradient UI\n    - custom color picker\n    - more visualizers\n    - better linux support (once I find the good moment to setup a Linux dev environment)\n    - keyboard shortcuts\n    - mouse interactions to manipulate objects\n    - translations\n    - helper to make cool designs by picking between choices.\n    - factory templates\n    - More accurate preview (time based instead of frame based)\n\n## Cool, when does it come ?\n\nAs always, because I am the only maintainer and developer of Wav2Bar, and as this is done on my free time, this depends of multiple factors. That includes workload given by the university, my physical health (wrists specifically if you are familiar with RSI), and the rest of life. I am doing my best to push this project forward and satisfy requests, but I also need to find balance with life, that goes without saying.\n\n## Contribution\n\nI will be preparing a CONTRIBUTING.md file on GitHub soon primarily for documentation on the project, but also to get something if someone would ever be interested to contribute. If it is your case, please contact me at picorims.contact@gmail.com so we can discuss the topic (in the current state it is not ready for that, in terms of git branches).","slug":"devlog-september-2021","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cku0bbxdf000rvsun649d91lt","content":"<p>Hi!</p>\n<p>I have been quite silent since Wav2Bar 0.2.0 release on July. I think now is a good opportunity to let you know how things are going, as well as giving plans for the next month. Let’s get started!</p>\n<h2 id=\"On-going-and-planned-updates\"><a href=\"#On-going-and-planned-updates\" class=\"headerlink\" title=\"On going and planned updates\"></a>On going and planned updates</h2><h3 id=\"Wav2Bar-0-3-0-development\"><a href=\"#Wav2Bar-0-3-0-development\" class=\"headerlink\" title=\"Wav2Bar 0.3.0 development\"></a>Wav2Bar 0.3.0 development</h3><p>Wav2Bar 0.3.0 development Started in early August. This update is mostly a technical update, and thus for many reasons.</p>\n<p>In the current implementation, each object has its own independent setup. That means that every time a change has to be made, it has to be repeated for every objects, which is very time consuming. Right now there are six available objects, so common changes and bug fixes have to be made six times. Let’s be honest, this is absolutely not sustainable on the long term. That’s why some heavy refactoring is being made in the background since August.</p>\n<p>That said refactoring has been almost finished this week. So I would say add that one third of the update has been completed. I know this is taking a lot of times, but this is necessary to be able to implement new visualizers. So what else has to be made?</p>\n<h3 id=\"Roadmap\"><a href=\"#Roadmap\" class=\"headerlink\" title=\"Roadmap\"></a>Roadmap</h3><p>Here is a roadmap of the future updates and planned features. This roadmap is absolutely not set in stone, and is subject to changes if needed as the times goes. But this should give you a good picture of what direction development is taking.</p>\n<ul>\n<li><strong>0.3.0</strong><ul>\n<li><strong>Write converter to new save format.</strong> With the heavy refactoring, the inner structure of saves has changed quite a lot. So there is some work to do so support older saves.</li>\n<li><strong>Fix 0.2.2 issue where opening a new project doesn’t clean up old objects’ interface.</strong></li>\n<li><strong>Hide/show object feature.</strong> This quality of life feature would help focusing on specific objects during design. I don’t know yet if this will be saved or not.</li>\n<li><strong>Some layout fixes.</strong> Updating the framework used to make Wav2Bar, Electron, introduced some quirks in the UI. It is also the opportunity to fix very small issues like the fact that the top audio controls take a lot of space. That make the screen less easily visible completely.</li>\n<li><strong>Display object borders on hovering of its settings.</strong> It is not always easy to see the boundaries of an object (like particle flow objects), which doesn’t help setting its size. This feature aim to fix this.</li>\n</ul>\n</li>\n<li><strong>0.3.1</strong><ul>\n<li><strong>convert CLI command.</strong> This quick command would convert the save to a newer said version. I also consider a potential folder support to make migrations easier if you like to keep up to date saves.</li>\n<li><strong>Keep track of last used folder in file explorer.</strong> Because always starting from home folder and doing all the clicks again is annoying!</li>\n</ul>\n</li>\n<li><strong>0.4.0</strong><ul>\n<li><strong>Continue internal refactoring, but less.</strong> Some last changes have to be made in objects property handling so the rest listed below is easier to do.</li>\n<li><strong>New visualizers.</strong> Yes. Finally. Two would be a great goal to start with. I need to experiment stuff.</li>\n<li><strong>Extend existing objects customization.</strong> That includes more options for text and particle flows.</li>\n</ul>\n</li>\n<li><strong>0.4.1</strong><ul>\n<li><strong>favorite folders in file explorer.</strong> This can act as shortcuts.</li>\n</ul>\n</li>\n<li><strong>Box of ideas for the future (i.e possible but not confirmed)</strong><ul>\n<li>full CLI with dedicated terminal and script reading</li>\n<li>more particle options</li>\n<li>gradient UI</li>\n<li>custom color picker</li>\n<li>more visualizers</li>\n<li>better linux support (once I find the good moment to setup a Linux dev environment)</li>\n<li>keyboard shortcuts</li>\n<li>mouse interactions to manipulate objects</li>\n<li>translations</li>\n<li>helper to make cool designs by picking between choices.</li>\n<li>factory templates</li>\n<li>More accurate preview (time based instead of frame based)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cool-when-does-it-come\"><a href=\"#Cool-when-does-it-come\" class=\"headerlink\" title=\"Cool, when does it come ?\"></a>Cool, when does it come ?</h2><p>As always, because I am the only maintainer and developer of Wav2Bar, and as this is done on my free time, this depends of multiple factors. That includes workload given by the university, my physical health (wrists specifically if you are familiar with RSI), and the rest of life. I am doing my best to push this project forward and satisfy requests, but I also need to find balance with life, that goes without saying.</p>\n<h2 id=\"Contribution\"><a href=\"#Contribution\" class=\"headerlink\" title=\"Contribution\"></a>Contribution</h2><p>I will be preparing a CONTRIBUTING.md file on GitHub soon primarily for documentation on the project, but also to get something if someone would ever be interested to contribute. If it is your case, please contact me at <a href=\"mailto:&#112;&#x69;&#99;&#111;&#x72;&#105;&#109;&#115;&#46;&#x63;&#x6f;&#x6e;&#x74;&#x61;&#99;&#116;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;\">&#112;&#x69;&#99;&#111;&#x72;&#105;&#109;&#115;&#46;&#x63;&#x6f;&#x6e;&#x74;&#x61;&#99;&#116;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a> so we can discuss the topic (in the current state it is not ready for that, in terms of git branches).</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi!</p>\n<p>I have been quite silent since Wav2Bar 0.2.0 release on July. I think now is a good opportunity to let you know how things are going, as well as giving plans for the next month. Let’s get started!</p>\n<h2 id=\"On-going-and-planned-updates\"><a href=\"#On-going-and-planned-updates\" class=\"headerlink\" title=\"On going and planned updates\"></a>On going and planned updates</h2><h3 id=\"Wav2Bar-0-3-0-development\"><a href=\"#Wav2Bar-0-3-0-development\" class=\"headerlink\" title=\"Wav2Bar 0.3.0 development\"></a>Wav2Bar 0.3.0 development</h3><p>Wav2Bar 0.3.0 development Started in early August. This update is mostly a technical update, and thus for many reasons.</p>\n<p>In the current implementation, each object has its own independent setup. That means that every time a change has to be made, it has to be repeated for every objects, which is very time consuming. Right now there are six available objects, so common changes and bug fixes have to be made six times. Let’s be honest, this is absolutely not sustainable on the long term. That’s why some heavy refactoring is being made in the background since August.</p>\n<p>That said refactoring has been almost finished this week. So I would say add that one third of the update has been completed. I know this is taking a lot of times, but this is necessary to be able to implement new visualizers. So what else has to be made?</p>\n<h3 id=\"Roadmap\"><a href=\"#Roadmap\" class=\"headerlink\" title=\"Roadmap\"></a>Roadmap</h3><p>Here is a roadmap of the future updates and planned features. This roadmap is absolutely not set in stone, and is subject to changes if needed as the times goes. But this should give you a good picture of what direction development is taking.</p>\n<ul>\n<li><strong>0.3.0</strong><ul>\n<li><strong>Write converter to new save format.</strong> With the heavy refactoring, the inner structure of saves has changed quite a lot. So there is some work to do so support older saves.</li>\n<li><strong>Fix 0.2.2 issue where opening a new project doesn’t clean up old objects’ interface.</strong></li>\n<li><strong>Hide/show object feature.</strong> This quality of life feature would help focusing on specific objects during design. I don’t know yet if this will be saved or not.</li>\n<li><strong>Some layout fixes.</strong> Updating the framework used to make Wav2Bar, Electron, introduced some quirks in the UI. It is also the opportunity to fix very small issues like the fact that the top audio controls take a lot of space. That make the screen less easily visible completely.</li>\n<li><strong>Display object borders on hovering of its settings.</strong> It is not always easy to see the boundaries of an object (like particle flow objects), which doesn’t help setting its size. This feature aim to fix this.</li>\n</ul>\n</li>\n<li><strong>0.3.1</strong><ul>\n<li><strong>convert CLI command.</strong> This quick command would convert the save to a newer said version. I also consider a potential folder support to make migrations easier if you like to keep up to date saves.</li>\n<li><strong>Keep track of last used folder in file explorer.</strong> Because always starting from home folder and doing all the clicks again is annoying!</li>\n</ul>\n</li>\n<li><strong>0.4.0</strong><ul>\n<li><strong>Continue internal refactoring, but less.</strong> Some last changes have to be made in objects property handling so the rest listed below is easier to do.</li>\n<li><strong>New visualizers.</strong> Yes. Finally. Two would be a great goal to start with. I need to experiment stuff.</li>\n<li><strong>Extend existing objects customization.</strong> That includes more options for text and particle flows.</li>\n</ul>\n</li>\n<li><strong>0.4.1</strong><ul>\n<li><strong>favorite folders in file explorer.</strong> This can act as shortcuts.</li>\n</ul>\n</li>\n<li><strong>Box of ideas for the future (i.e possible but not confirmed)</strong><ul>\n<li>full CLI with dedicated terminal and script reading</li>\n<li>more particle options</li>\n<li>gradient UI</li>\n<li>custom color picker</li>\n<li>more visualizers</li>\n<li>better linux support (once I find the good moment to setup a Linux dev environment)</li>\n<li>keyboard shortcuts</li>\n<li>mouse interactions to manipulate objects</li>\n<li>translations</li>\n<li>helper to make cool designs by picking between choices.</li>\n<li>factory templates</li>\n<li>More accurate preview (time based instead of frame based)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cool-when-does-it-come\"><a href=\"#Cool-when-does-it-come\" class=\"headerlink\" title=\"Cool, when does it come ?\"></a>Cool, when does it come ?</h2><p>As always, because I am the only maintainer and developer of Wav2Bar, and as this is done on my free time, this depends of multiple factors. That includes workload given by the university, my physical health (wrists specifically if you are familiar with RSI), and the rest of life. I am doing my best to push this project forward and satisfy requests, but I also need to find balance with life, that goes without saying.</p>\n<h2 id=\"Contribution\"><a href=\"#Contribution\" class=\"headerlink\" title=\"Contribution\"></a>Contribution</h2><p>I will be preparing a CONTRIBUTING.md file on GitHub soon primarily for documentation on the project, but also to get something if someone would ever be interested to contribute. If it is your case, please contact me at <a href=\"mailto:&#112;&#x69;&#99;&#111;&#x72;&#105;&#109;&#115;&#46;&#x63;&#x6f;&#x6e;&#x74;&#x61;&#99;&#116;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;\">&#112;&#x69;&#99;&#111;&#x72;&#105;&#109;&#115;&#46;&#x63;&#x6f;&#x6e;&#x74;&#x61;&#99;&#116;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a> so we can discuss the topic (in the current state it is not ready for that, in terms of git branches).</p>\n"}],"PostAsset":[{"_id":"source/_posts/beta-0-2-presentation/2021-07-21-155400-wav2bar-0-2-0-beta.png","slug":"2021-07-21-155400-wav2bar-0-2-0-beta.png","post":"cku0bbxd10000vsun1w2v0s8l","modified":0,"renderable":0},{"_id":"source/_posts/beta-0-2-presentation/2021-07-21-162137-beta-0-2-glow-example.png","slug":"2021-07-21-162137-beta-0-2-glow-example.png","post":"cku0bbxd10000vsun1w2v0s8l","modified":0,"renderable":0},{"_id":"source/_posts/beta-0-2-presentation/2021-07-21-w2b-0-2-beta-color-picker.png","slug":"2021-07-21-w2b-0-2-beta-color-picker.png","post":"cku0bbxd10000vsun1w2v0s8l","modified":0,"renderable":0},{"_id":"source/_posts/beta-0-2-presentation/2021-07-21-wav2bar-0-2-beta-before-after.png","slug":"2021-07-21-wav2bar-0-2-beta-before-after.png","post":"cku0bbxd10000vsun1w2v0s8l","modified":0,"renderable":0},{"_id":"source/_posts/first-post/main_background.png","slug":"main_background.png","post":"cku0bbxd50001vsunhcoke0eq","modified":0,"renderable":0},{"_id":"source/_posts/beta-0-1-and-general-update/thumbnail_wav2bar_showcase.jpg","slug":"thumbnail_wav2bar_showcase.jpg","post":"cku0bbxd70004vsun2hxt5gzw","modified":0,"renderable":0},{"_id":"source/_posts/devlog-september-2021/thumbnail-devlog-september-2021.png","slug":"thumbnail-devlog-september-2021.png","post":"cku0bbxdf000rvsun649d91lt","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cku0bbxd50001vsunhcoke0eq","category_id":"cku0bbxd60002vsune100gbuj","_id":"cku0bbxdb000avsunbxgkes22"},{"post_id":"cku0bbxd10000vsun1w2v0s8l","category_id":"cku0bbxd60002vsune100gbuj","_id":"cku0bbxdd000hvsun6wwt6y36"},{"post_id":"cku0bbxd10000vsun1w2v0s8l","category_id":"cku0bbxdb0009vsun69nv6lju","_id":"cku0bbxdd000kvsundku232vv"},{"post_id":"cku0bbxd70004vsun2hxt5gzw","category_id":"cku0bbxd60002vsune100gbuj","_id":"cku0bbxde000lvsun2guydopt"},{"post_id":"cku0bbxd70004vsun2hxt5gzw","category_id":"cku0bbxdb0009vsun69nv6lju","_id":"cku0bbxde000nvsunggh1fwib"},{"post_id":"cku0bbxdf000rvsun649d91lt","category_id":"cku0bbxd60002vsune100gbuj","_id":"cku0bbxdh000wvsun7qx0ffpb"},{"post_id":"cku0bbxdf000rvsun649d91lt","category_id":"cku0bbxdg000tvsun5ilxcb3i","_id":"cku0bbxdh000yvsunghaofm3u"}],"PostTag":[{"post_id":"cku0bbxd10000vsun1w2v0s8l","tag_id":"cku0bbxd70003vsuncr5nfz2v","_id":"cku0bbxdc000cvsunbluf7khi"},{"post_id":"cku0bbxd10000vsun1w2v0s8l","tag_id":"cku0bbxd90006vsun6qks33bw","_id":"cku0bbxdc000evsungtnpa49y"},{"post_id":"cku0bbxd10000vsun1w2v0s8l","tag_id":"cku0bbxdb0008vsun2b0qe0rs","_id":"cku0bbxdd000gvsunhwih5lux"},{"post_id":"cku0bbxd50001vsunhcoke0eq","tag_id":"cku0bbxd70003vsuncr5nfz2v","_id":"cku0bbxdd000ivsundk6f19vd"},{"post_id":"cku0bbxd70004vsun2hxt5gzw","tag_id":"cku0bbxd70003vsuncr5nfz2v","_id":"cku0bbxde000ovsun67pmcba3"},{"post_id":"cku0bbxd70004vsun2hxt5gzw","tag_id":"cku0bbxd90006vsun6qks33bw","_id":"cku0bbxde000pvsunecm8770d"},{"post_id":"cku0bbxd70004vsun2hxt5gzw","tag_id":"cku0bbxdb0008vsun2b0qe0rs","_id":"cku0bbxde000qvsun04l67wra"},{"post_id":"cku0bbxdf000rvsun649d91lt","tag_id":"cku0bbxd70003vsuncr5nfz2v","_id":"cku0bbxdh000uvsunaops7n40"},{"post_id":"cku0bbxdf000rvsun649d91lt","tag_id":"cku0bbxd90006vsun6qks33bw","_id":"cku0bbxdh000vvsuncwhl0peh"},{"post_id":"cku0bbxdf000rvsun649d91lt","tag_id":"cku0bbxdg000svsun0fjnfjn5","_id":"cku0bbxdh000xvsunebhh5cuf"}],"Tag":[{"name":"news","_id":"cku0bbxd70003vsuncr5nfz2v"},{"name":"beta","_id":"cku0bbxd90006vsun6qks33bw"},{"name":"release","_id":"cku0bbxdb0008vsun2b0qe0rs"},{"name":"devlog","_id":"cku0bbxdg000svsun0fjnfjn5"}]}}